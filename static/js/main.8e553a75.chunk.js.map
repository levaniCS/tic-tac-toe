{"version":3,"sources":["components/Square.js","components/Restart.js","components/Game.js","components/calcWinner.js","App.js","index.js"],"names":["Square","value","onClick","color","className","style","Restart","Game","useState","Array","fill","squares","setSquares","isXNext","setIsXNext","winner","possibleLines","i","length","a","b","c","calculateWinner","nextSymbol","renderSquare","nextSquares","slice","isBoardFull","App","ReactDOM","render","document","getElementById"],"mappings":"mKAceA,EAZA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACnBC,EAAQ,MAIZ,MAHc,MAAVF,IACFE,EAAQ,QAGR,4BAAQC,UAAU,SAASC,MAAO,CAAEF,MAAOA,GAASD,QAASA,GAC1DD,ICCQK,EARC,SAAC,GAAiB,IAAfJ,EAAc,EAAdA,QACjB,OACE,4BAAQE,UAAU,UAAUF,QAASA,GAArC,eC2EWK,EAzEF,WAAO,IAAD,EACaC,mBAASC,MAAM,GAAGC,KAAK,OADpC,mBACVC,EADU,KACDC,EADC,OAEaJ,oBAAS,GAFtB,mBAEVK,EAFU,KAEDC,EAFC,OAGuBN,oBAAS,GAHhC,mBAKXO,GALW,UCNY,SAACJ,GAY9B,IAXA,IAAMK,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAcE,OAAQD,IAAK,CAAC,IAAD,cAC3BD,EAAcC,GADa,GACtCE,EADsC,KACnCC,EADmC,KAChCC,EADgC,KAE7C,GAAIV,EAAQQ,IAAMR,EAAQQ,KAAOR,EAAQS,IAAMT,EAAQQ,KAAOR,EAAQU,GACpE,OAAOV,EAAQQ,GAGnB,OAAO,KDPQG,CAAgBX,IACzBY,EAAaV,EAAU,IAAM,IAEnC,SAASW,EAAaP,GACpB,OACE,kBAAC,EAAD,CACEhB,MAAOU,EAAQM,GACff,QAAS,WACP,GAAkB,MAAdS,EAAQM,IAAwB,MAAVF,EAA1B,CAGA,IAAMU,EAAcd,EAAQe,QAC5BD,EAAYR,GAAKJ,EAAU,IAAM,IACjCD,EAAWa,GAEXX,GAAYD,OA0BpB,OACE,yBAAKT,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,aACZoB,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKpB,UAAU,aACZoB,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKpB,UAAU,aACZoB,EAAa,GACbA,EAAa,GACbA,EAAa,KAGlB,yBAAKpB,UAAU,aA7BfW,EACK,WAAaA,ECvBC,SAACJ,GAC1B,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAQO,OAAQD,IAClC,GAAkB,MAAdN,EAAQM,GACV,OAAO,EAGX,OAAO,EDkBMU,CAAYhB,GACd,QAEA,gBAAkBY,GAyBvB,yBAAKnB,UAAU,kBAxCjB,kBAAC,EAAD,CACEF,QAAS,WACPU,EAAWH,MAAM,GAAGC,KAAK,OACzBI,GAAW,UE7BNc,EAJH,WACV,OAAO,kBAAC,EAAD,O,KCCTC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.8e553a75.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = ({ value, onClick }) => {\r\n  let color = 'red';\r\n  if (value === 'X') {\r\n    color = 'blue';\r\n  }\r\n  return (\r\n    <button className='square' style={{ color: color }} onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from 'react';\r\n\r\nconst Restart = ({ onClick }) => {\r\n  return (\r\n    <button className='restart' onClick={onClick}>\r\n      Play again\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Restart;\r\n","import React, { useState } from 'react';\r\nimport Square from './Square';\r\nimport Restart from './Restart';\r\n\r\nimport { calculateWinner, isBoardFull } from './calcWinner';\r\n\r\nconst Game = () => {\r\n  const [squares, setSquares] = useState(Array(9).fill(null));\r\n  const [isXNext, setIsXNext] = useState(true);\r\n  const [isSingleMode, setIsSingleMode] = useState(false);\r\n\r\n  const winner = calculateWinner(squares);\r\n  const nextSymbol = isXNext ? 'X' : 'O';\r\n\r\n  function renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={squares[i]}\r\n        onClick={() => {\r\n          if (squares[i] != null || winner != null) {\r\n            return;\r\n          }\r\n          const nextSquares = squares.slice();\r\n          nextSquares[i] = isXNext ? 'X' : 'O';\r\n          setSquares(nextSquares);\r\n\r\n          setIsXNext(!isXNext); // toggle turns\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  function renderRestartButton() {\r\n    return (\r\n      <Restart\r\n        onClick={() => {\r\n          setSquares(Array(9).fill(null));\r\n          setIsXNext(true);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  const getStatus = () => {\r\n    if (winner) {\r\n      return 'Winner: ' + winner;\r\n    } else if (isBoardFull(squares)) {\r\n      return 'Draw!';\r\n    } else {\r\n      return 'Next player: ' + nextSymbol;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className='game'>\r\n        <div className='game-board'>\r\n          <div className='board-row'>\r\n            {renderSquare(0)}\r\n            {renderSquare(1)}\r\n            {renderSquare(2)}\r\n          </div>\r\n          <div className='board-row'>\r\n            {renderSquare(3)}\r\n            {renderSquare(4)}\r\n            {renderSquare(5)}\r\n          </div>\r\n          <div className='board-row'>\r\n            {renderSquare(6)}\r\n            {renderSquare(7)}\r\n            {renderSquare(8)}\r\n          </div>\r\n        </div>\r\n        <div className='game-info'>{getStatus()}</div>\r\n        <div className='restart-button'>{renderRestartButton()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","export const calculateWinner = (squares) => {\r\n  const possibleLines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  // go over all possibly winning lines and check if they consist of only X's/only O's\r\n  for (let i = 0; i < possibleLines.length; i++) {\r\n    const [a, b, c] = possibleLines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const isBoardFull = (squares) => {\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] == null) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n","import React from 'react';\r\nimport Game from './components/Game';\r\n\r\nconst App = () => {\r\n  return <Game />;\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}